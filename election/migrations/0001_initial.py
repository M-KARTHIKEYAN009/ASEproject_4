# Generated by Django 4.2 on 2023-11-05 10:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ElectionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Title of the election event.', max_length=200)),
                ('date_of_election', models.DateField(help_text='Scheduled date for the election.')),
                ('voting_start_time', models.TimeField(help_text='Time when voting starts.')),
                ('voting_end_time', models.TimeField(help_text='Time when voting ends.')),
                ('result_announcement_date', models.DateField(help_text='Scheduled date for announcing results.')),
                ('additional_notes', models.TextField(blank=True, help_text='Any additional notes related to the election.', null=True)),
                ('has_concluded', models.BooleanField(default=False, help_text='Status to indicate if the election has concluded.')),
            ],
        ),
        migrations.CreateModel(
            name='ElectionUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_candidate', models.BooleanField(default=False)),
                ('is_voter', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number of the user.', max_length=10, null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the user was registered.')),
                ('updated_date', models.DateTimeField(auto_now=True, help_text='Timestamp when the user profile was last updated.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='electionuser_groups', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='electionuser_user_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField(blank=True, help_text='Date of birth.', null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], help_text='Gender of the person.', max_length=1, null=True)),
                ('residence', models.TextField(blank=True, help_text='Residential address.', null=True)),
                ('party', models.CharField(blank=True, choices=[('CON', 'Congress'), ('REP', 'Republican Party'), ('DEM', 'Democratic Party'), ('LIB', 'Libertarian Party'), ('GRE', 'Green Party'), ('IND', 'Independent'), ('SOC', 'Socialist Party'), ('UNA', 'Unaffiliated'), ('OTH', 'Other')], help_text='Political party affiliation.', max_length=50, null=True)),
                ('id_document', models.ImageField(blank=True, help_text='Identity document image.', null=True, upload_to='user_docs', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('biography', models.TextField(blank=True, help_text='Biographical information for the candidate.', null=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Flag to indicate if the profile has been verified.')),
                ('faulty_account', models.BooleanField(default=False, help_text='Flag to indicate if the account has inconsistencies.')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='election.electionuser')),
            ],
        ),
        migrations.CreateModel(
            name='ElectionVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the vote was recorded.')),
                ('candidate', models.ForeignKey(help_text='Candidate who received the vote.', on_delete=django.db.models.deletion.CASCADE, related_name='votes_received', to='election.userprofile')),
                ('election', models.ForeignKey(help_text='Election in which the vote was cast.', on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='election.electionevent')),
                ('voter', models.ForeignKey(help_text='Voter who cast the vote.', on_delete=django.db.models.deletion.CASCADE, related_name='votes_cast', to='election.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='electionevent',
            name='victor',
            field=models.ForeignKey(blank=True, help_text='The winning candidate of the election.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_elections', to='election.userprofile'),
        ),
    ]
